schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  S2S_LF @join__graph(name: "s2s-lf", url: "http://localhost:5000/")
  UMS @join__graph(name: "ums", url: "http://localhost:4000/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: S2S_LF)
  @join__type(graph: UMS)
{
  createProduct(productName: String!, category: String!, brand: String!): Product @join__field(graph: S2S_LF)
  createUser(name: String!, age: Int, email: String!, password: String!): User @join__field(graph: UMS)
}

type Product
  @join__type(graph: S2S_LF, key: "id")
{
  id: ID!
  productName: String!
  category: String!
  brand: String!
}

type Query
  @join__type(graph: S2S_LF)
  @join__type(graph: UMS)
{
  products: [Product]! @join__field(graph: S2S_LF)
  users: [User]! @join__field(graph: UMS)
}

type User
  @join__type(graph: UMS, key: "id")
{
  id: ID!
  name: String!
  age: Int
  email: String!
  password: String!
}